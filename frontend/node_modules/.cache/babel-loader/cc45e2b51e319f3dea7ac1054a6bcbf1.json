{"ast":null,"code":"import { unstable_batchedUpdates } from 'react-dom';\nimport { isUsingStaticRendering, observer, Observer } from 'mobx-react-lite';\nexport { Observer, useObserver, useAsObservableSource, useLocalStore, isUsingStaticRendering, useStaticRendering } from 'mobx-react-lite';\nimport React__default, { PureComponent, Component, forwardRef, memo, createElement } from 'react';\nimport { createAtom, _allowStateChanges, Reaction, $mobx, isObservableArray, isObservableObject, isObservableMap, untracked, observable, configure } from 'mobx';\nvar symbolId = 0;\n\nfunction createSymbol(name) {\n  if (typeof Symbol === \"function\") {\n    return Symbol(name);\n  }\n\n  var symbol = \"__$mobx-react \" + name + \" (\" + symbolId + \")\";\n  symbolId++;\n  return symbol;\n}\n\nvar createdSymbols = {};\n\nfunction newSymbol(name) {\n  if (!createdSymbols[name]) {\n    createdSymbols[name] = createSymbol(name);\n  }\n\n  return createdSymbols[name];\n}\n\nfunction shallowEqual(objA, objB) {\n  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\n\nvar hoistBlackList = {\n  $$typeof: 1,\n  render: 1,\n  compare: 1,\n  type: 1,\n  childContextTypes: 1,\n  contextType: 1,\n  contextTypes: 1,\n  defaultProps: 1,\n  getDefaultProps: 1,\n  getDerivedStateFromError: 1,\n  getDerivedStateFromProps: 1,\n  mixins: 1,\n  propTypes: 1\n};\n\nfunction copyStaticProperties(base, target) {\n  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));\n  Object.getOwnPropertyNames(base).forEach(function (key) {\n    if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\n/**\n * Helper to set `prop` to `this` as non-enumerable (hidden prop)\n * @param target\n * @param prop\n * @param value\n */\n\n\nfunction setHiddenProp(target, prop, value) {\n  if (!Object.hasOwnProperty.call(target, prop)) {\n    Object.defineProperty(target, prop, {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: value\n    });\n  } else {\n    target[prop] = value;\n  }\n}\n/**\n * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks\n * and the handler provided by mobx-react\n */\n\n\nvar mobxMixins = newSymbol(\"patchMixins\");\nvar mobxPatchedDefinition = newSymbol(\"patchedDefinition\");\n\nfunction getMixins(target, methodName) {\n  var mixins = target[mobxMixins] = target[mobxMixins] || {};\n  var methodMixins = mixins[methodName] = mixins[methodName] || {};\n  methodMixins.locks = methodMixins.locks || 0;\n  methodMixins.methods = methodMixins.methods || [];\n  return methodMixins;\n}\n\nfunction wrapper(realMethod, mixins) {\n  var this$1 = this;\n  var args = [],\n      len = arguments.length - 2;\n\n  while (len-- > 0) args[len] = arguments[len + 2]; // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls\n\n\n  mixins.locks++;\n\n  try {\n    var retVal;\n\n    if (realMethod !== undefined && realMethod !== null) {\n      retVal = realMethod.apply(this, args);\n    }\n\n    return retVal;\n  } finally {\n    mixins.locks--;\n\n    if (mixins.locks === 0) {\n      mixins.methods.forEach(function (mx) {\n        mx.apply(this$1, args);\n      });\n    }\n  }\n}\n\nfunction wrapFunction(realMethod, mixins) {\n  var fn = function () {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));\n  };\n\n  return fn;\n}\n\nfunction patch(target, methodName, mixinMethod) {\n  var mixins = getMixins(target, methodName);\n\n  if (mixins.methods.indexOf(mixinMethod) < 0) {\n    mixins.methods.push(mixinMethod);\n  }\n\n  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);\n\n  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {\n    // already patched definition, do not repatch\n    return;\n  }\n\n  var originalMethod = target[methodName];\n  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);\n  Object.defineProperty(target, methodName, newDefinition);\n}\n\nfunction createDefinition(target, methodName, enumerable, mixins, originalMethod) {\n  var obj;\n  var wrappedFunc = wrapFunction(originalMethod, mixins);\n  return obj = {}, obj[mobxPatchedDefinition] = true, obj.get = function () {\n    return wrappedFunc;\n  }, obj.set = function (value) {\n    if (this === target) {\n      wrappedFunc = wrapFunction(value, mixins);\n    } else {\n      // when it is an instance of the prototype/a child prototype patch that particular case again separately\n      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc\n      // e.g. the method for super might not be the same as the method for the prototype which might be not the same\n      // as the method for the instance\n      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);\n      Object.defineProperty(this, methodName, newDefinition);\n    }\n  }, obj.configurable = true, obj.enumerable = enumerable, obj;\n}\n\nvar mobxAdminProperty = $mobx || \"$mobx\";\nvar mobxIsUnmounted = newSymbol(\"isUnmounted\");\nvar skipRenderKey = newSymbol(\"skipRender\");\nvar isForcingUpdateKey = newSymbol(\"isForcingUpdate\");\n\nfunction makeClassComponentObserver(componentClass) {\n  var target = componentClass.prototype;\n\n  if (target.componentWillReact) {\n    throw new Error(\"The componentWillReact life-cycle event is no longer supported\");\n  }\n\n  if (componentClass.__proto__ !== PureComponent) {\n    if (!target.shouldComponentUpdate) {\n      target.shouldComponentUpdate = observerSCU;\n    } else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well\n      {\n        throw new Error(\"It is not allowed to use shouldComponentUpdate in observer based components.\");\n      }\n  } // this.props and this.state are made observable, just to make sure @computed fields that\n  // are defined inside the component, and which rely on state or props, re-compute if state or props change\n  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)\n  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+\n\n\n  makeObservableProp(target, \"props\");\n  makeObservableProp(target, \"state\");\n  var baseRender = target.render;\n\n  target.render = function () {\n    return makeComponentReactive.call(this, baseRender);\n  };\n\n  patch(target, \"componentWillUnmount\", function () {\n    if (isUsingStaticRendering() === true) {\n      return;\n    }\n\n    if (this.render[mobxAdminProperty]) {\n      this.render[mobxAdminProperty].dispose();\n    } else if (process.env.NODE_ENV !== \"production\") {\n      var displayName = getDisplayName(this);\n      console.warn(\"The render function for an observer component (\" + displayName + \") was modified after MobX attached. This is not supported, since the new function can't be triggered by MobX.\");\n    }\n\n    this[mobxIsUnmounted] = true;\n  });\n  return componentClass;\n} // Generates a friendly name for debugging\n\n\nfunction getDisplayName(comp) {\n  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || \"<component>\";\n}\n\nfunction makeComponentReactive(render) {\n  var this$1 = this;\n\n  if (isUsingStaticRendering() === true) {\n    return render.call(this);\n  }\n  /**\n   * If props are shallowly modified, react will render anyway,\n   * so atom.reportChanged() should not result in yet another re-render\n   */\n\n\n  setHiddenProp(this, skipRenderKey, false);\n  /**\n   * forceUpdate will re-assign this.props. We don't want that to cause a loop,\n   * so detect these changes\n   */\n\n  setHiddenProp(this, isForcingUpdateKey, false);\n  var initialName = getDisplayName(this);\n  var baseRender = render.bind(this);\n  var isRenderingPending = false;\n  var reaction = new Reaction(initialName + \".render()\", function () {\n    if (!isRenderingPending) {\n      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)\n      // This unidiomatic React usage but React will correctly warn about this so we continue as usual\n      // See #85 / Pull #44\n      isRenderingPending = true;\n\n      if (this$1[mobxIsUnmounted] !== true) {\n        var hasError = true;\n\n        try {\n          setHiddenProp(this$1, isForcingUpdateKey, true);\n\n          if (!this$1[skipRenderKey]) {\n            Component.prototype.forceUpdate.call(this$1);\n          }\n\n          hasError = false;\n        } finally {\n          setHiddenProp(this$1, isForcingUpdateKey, false);\n\n          if (hasError) {\n            reaction.dispose();\n          }\n        }\n      }\n    }\n  });\n  reaction.reactComponent = this;\n  reactiveRender[mobxAdminProperty] = reaction;\n  this.render = reactiveRender;\n\n  function reactiveRender() {\n    isRenderingPending = false;\n    var exception = undefined;\n    var rendering = undefined;\n    reaction.track(function () {\n      try {\n        rendering = _allowStateChanges(false, baseRender);\n      } catch (e) {\n        exception = e;\n      }\n    });\n\n    if (exception) {\n      throw exception;\n    }\n\n    return rendering;\n  }\n\n  return reactiveRender.call(this);\n}\n\nfunction observerSCU(nextProps, nextState) {\n  if (isUsingStaticRendering()) {\n    console.warn(\"[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.\");\n  } // update on any state changes (as is the default)\n\n\n  if (this.state !== nextState) {\n    return true;\n  } // update if props are shallowly not equal, inspired by PureRenderMixin\n  // we could return just 'false' here, and avoid the `skipRender` checks etc\n  // however, it is nicer if lifecycle events are triggered like usually,\n  // so we return true here if props are shallowly modified.\n\n\n  return !shallowEqual(this.props, nextProps);\n}\n\nfunction makeObservableProp(target, propName) {\n  var valueHolderKey = newSymbol(\"reactProp_\" + propName + \"_valueHolder\");\n  var atomHolderKey = newSymbol(\"reactProp_\" + propName + \"_atomHolder\");\n\n  function getAtom() {\n    if (!this[atomHolderKey]) {\n      setHiddenProp(this, atomHolderKey, createAtom(\"reactive \" + propName));\n    }\n\n    return this[atomHolderKey];\n  }\n\n  Object.defineProperty(target, propName, {\n    configurable: true,\n    enumerable: true,\n    get: function () {\n      getAtom.call(this).reportObserved();\n      return this[valueHolderKey];\n    },\n    set: function set(v) {\n      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {\n        setHiddenProp(this, valueHolderKey, v);\n        setHiddenProp(this, skipRenderKey, true);\n        getAtom.call(this).reportChanged();\n        setHiddenProp(this, skipRenderKey, false);\n      } else {\n        setHiddenProp(this, valueHolderKey, v);\n      }\n    }\n  });\n}\n/* eslint-disable react/display-name */\n\n\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609\n\nvar ReactForwardRefSymbol = hasSymbol ? Symbol.for(\"react.forward_ref\") : typeof forwardRef === \"function\" && forwardRef(function () {})[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol ? Symbol.for(\"react.memo\") : typeof memo === \"function\" && memo(function () {})[\"$$typeof\"];\n/**\n * Observer function / decorator\n */\n\nfunction observer$1(componentClass) {\n  if (componentClass.isMobxInjector === true) {\n    console.warn(\"Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'\");\n  }\n\n  if (ReactMemoSymbol && componentClass[\"$$typeof\"] === ReactMemoSymbol) {\n    throw new Error(\"Mobx observer: You are trying to use 'observer' on function component wrapped to either another observer or 'React.memo'. The observer already applies 'React.memo' for you.\");\n  } // Unwrap forward refs into `<Observer>` component\n  // we need to unwrap the render, because it is the inner render that needs to be tracked,\n  // not the ForwardRef HoC\n\n\n  if (ReactForwardRefSymbol && componentClass[\"$$typeof\"] === ReactForwardRefSymbol) {\n    var baseRender = componentClass.render;\n\n    if (typeof baseRender !== \"function\") {\n      throw new Error(\"render property of ForwardRef was not a function\");\n    }\n\n    return forwardRef(function ObserverForwardRef() {\n      var arguments$1 = arguments;\n      return React__default.createElement(Observer, null, function () {\n        return baseRender.apply(undefined, arguments$1);\n      });\n    });\n  } // Function component\n\n\n  if (typeof componentClass === \"function\" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !Object.prototype.isPrototypeOf.call(Component, componentClass)) {\n    return observer(componentClass);\n  }\n\n  return makeClassComponentObserver(componentClass);\n}\n/* eslint-disable react/prop-types */\n\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar MobXProviderContext = React__default.createContext({});\n\nfunction Provider(ref) {\n  var children = ref.children;\n  var rest = objectWithoutProperties(ref, [\"children\"]);\n  var stores = rest;\n  var parentValue = React__default.useContext(MobXProviderContext);\n  var value = React__default.useRef(Object.assign({}, parentValue, stores)).current;\n\n  if (process && typeof process.env !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n    var newValue = Object.assign({}, value, stores); // spread in previous state for the context based stores\n\n    if (!shallowEqual(value, newValue)) {\n      throw new Error(\"MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.\");\n    }\n  }\n\n  return React__default.createElement(MobXProviderContext.Provider, {\n    value: value\n  }, children);\n}\n\nProvider.displayName = \"MobXProvider\";\n/**\n * Store Injection\n */\n\nfunction createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {\n  // Support forward refs\n  var Injector = React__default.forwardRef(function (props, ref) {\n    var newProps = Object.assign({}, props);\n    var context = React__default.useContext(MobXProviderContext);\n    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});\n\n    if (ref) {\n      newProps.ref = ref;\n    }\n\n    return createElement(component, newProps);\n  });\n\n  if (makeReactive) {\n    Injector = observer$1(Injector);\n  }\n\n  Injector.isMobxInjector = true; // assigned late to suppress observer warning\n  // Static fields from component should be visible on the generated Injector\n\n  copyStaticProperties(component, Injector);\n  Injector.wrappedComponent = component;\n  Injector.displayName = getInjectName(component, injectNames);\n  return Injector;\n}\n\nfunction getInjectName(component, injectNames) {\n  var displayName;\n  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || \"Component\";\n\n  if (injectNames) {\n    displayName = \"inject-with-\" + injectNames + \"(\" + componentName + \")\";\n  } else {\n    displayName = \"inject(\" + componentName + \")\";\n  }\n\n  return displayName;\n}\n\nfunction grabStoresByName(storeNames) {\n  return function (baseStores, nextProps) {\n    storeNames.forEach(function (storeName) {\n      if (storeName in nextProps // prefer props over stores\n      ) {\n          return;\n        }\n\n      if (!(storeName in baseStores)) {\n        throw new Error(\"MobX injector: Store '\" + storeName + \"' is not available! Make sure it is provided by some Provider\");\n      }\n\n      nextProps[storeName] = baseStores[storeName];\n    });\n    return nextProps;\n  };\n}\n/**\n * higher order component that injects stores to a child.\n * takes either a varargs list of strings, which are stores read from the context,\n * or a function that manually maps the available stores from the context to props:\n * storesToProps(mobxStores, props, context) => newProps\n */\n\n\nfunction inject()\n/* fn(stores, nextProps) or ...storeNames */\n{\n  var storeNames = [],\n      len = arguments.length;\n\n  while (len--) storeNames[len] = arguments[len];\n\n  var grabStoresFn;\n\n  if (typeof arguments[0] === \"function\") {\n    grabStoresFn = arguments[0];\n    return function (componentClass) {\n      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);\n    };\n  } else {\n    return function (componentClass) {\n      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join(\"-\"), false);\n    };\n  }\n}\n\nvar protoStoreKey = newSymbol(\"disposeOnUnmountProto\");\nvar instStoreKey = newSymbol(\"disposeOnUnmountInst\");\n\nfunction runDisposersOnWillUnmount() {\n  var this$1 = this;\n  (this[protoStoreKey] || []).concat(this[instStoreKey] || []).forEach(function (propKeyOrFunction) {\n    var prop = typeof propKeyOrFunction === \"string\" ? this$1[propKeyOrFunction] : propKeyOrFunction;\n\n    if (prop !== undefined && prop !== null) {\n      if (Array.isArray(prop)) {\n        prop.map(function (f) {\n          return f();\n        });\n      } else {\n        prop();\n      }\n    }\n  });\n}\n\nfunction disposeOnUnmount(target, propertyKeyOrFunction) {\n  if (Array.isArray(propertyKeyOrFunction)) {\n    return propertyKeyOrFunction.map(function (fn) {\n      return disposeOnUnmount(target, fn);\n    });\n  }\n\n  var c = Object.getPrototypeOf(target).constructor || Object.getPrototypeOf(target.constructor);\n  var c2 = Object.getPrototypeOf(target.constructor);\n\n  if (!(c === Component || c === PureComponent || c2 === Component || c2 === PureComponent)) {\n    throw new Error(\"[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.\");\n  }\n\n  if (typeof propertyKeyOrFunction !== \"string\" && typeof propertyKeyOrFunction !== \"function\" && !Array.isArray(propertyKeyOrFunction)) {\n    throw new Error(\"[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.\");\n  } // decorator's target is the prototype, so it doesn't have any instance properties like props\n\n\n  var isDecorator = typeof propertyKeyOrFunction === \"string\"; // add property key / function we want run (disposed) to the store\n\n  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];\n  var store = isDecorator ? // decorators are added to the prototype store\n  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store\n  target[instStoreKey] || (target[instStoreKey] = []);\n  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already\n\n  if (!componentWasAlreadyModified) {\n    patch(target, \"componentWillUnmount\", runDisposersOnWillUnmount);\n  } // return the disposer as is if invoked as a non decorator\n\n\n  if (typeof propertyKeyOrFunction !== \"string\") {\n    return propertyKeyOrFunction;\n  }\n}\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName) {\n    var rest = [],\n        len = arguments.length - 6;\n\n    while (len-- > 0) rest[len] = arguments[len + 6];\n\n    return untracked(function () {\n      componentName = componentName || \"<<anonymous>>\";\n      propFullName = propFullName || propName;\n\n      if (props[propName] == null) {\n        if (isRequired) {\n          var actual = props[propName] === null ? \"null\" : \"undefined\";\n          return new Error(\"The \" + location + \" `\" + propFullName + \"` is marked as required \" + \"in `\" + componentName + \"`, but its value is `\" + actual + \"`.\");\n        }\n\n        return null;\n      } else {\n        return validate.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));\n      }\n    });\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n} // Copied from React.PropTypes\n\n\nfunction isSymbol(propType, propValue) {\n  // Native Symbol.\n  if (propType === \"symbol\") {\n    return true;\n  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n  if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n    return true;\n  } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n  if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n    return true;\n  }\n\n  return false;\n} // Copied from React.PropTypes\n\n\nfunction getPropType(propValue) {\n  var propType = typeof propValue;\n\n  if (Array.isArray(propValue)) {\n    return \"array\";\n  }\n\n  if (propValue instanceof RegExp) {\n    // Old webkits (at least until Android 4.0) return 'function' rather than\n    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n    // passes PropTypes.object.\n    return \"object\";\n  }\n\n  if (isSymbol(propType, propValue)) {\n    return \"symbol\";\n  }\n\n  return propType;\n} // This handles more types than `getPropType`. Only used for error messages.\n// Copied from React.PropTypes\n\n\nfunction getPreciseType(propValue) {\n  var propType = getPropType(propValue);\n\n  if (propType === \"object\") {\n    if (propValue instanceof Date) {\n      return \"date\";\n    } else if (propValue instanceof RegExp) {\n      return \"regexp\";\n    }\n  }\n\n  return propType;\n}\n\nfunction createObservableTypeCheckerCreator(allowNativeType, mobxType) {\n  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n    return untracked(function () {\n      if (allowNativeType) {\n        if (getPropType(props[propName]) === mobxType.toLowerCase()) {\n          return null;\n        }\n      }\n\n      var mobxChecker;\n\n      switch (mobxType) {\n        case \"Array\":\n          mobxChecker = isObservableArray;\n          break;\n\n        case \"Object\":\n          mobxChecker = isObservableObject;\n          break;\n\n        case \"Map\":\n          mobxChecker = isObservableMap;\n          break;\n\n        default:\n          throw new Error(\"Unexpected mobxType: \" + mobxType);\n      }\n\n      var propValue = props[propName];\n\n      if (!mobxChecker(propValue)) {\n        var preciseType = getPreciseType(propValue);\n        var nativeTypeExpectationMessage = allowNativeType ? \" or javascript `\" + mobxType.toLowerCase() + \"`\" : \"\";\n        return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + preciseType + \"` supplied to\" + \" `\" + componentName + \"`, expected `mobx.Observable\" + mobxType + \"`\" + nativeTypeExpectationMessage + \".\");\n      }\n\n      return null;\n    });\n  });\n}\n\nfunction createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {\n  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {\n    var rest = [],\n        len = arguments.length - 5;\n\n    while (len-- > 0) rest[len] = arguments[len + 5];\n\n    return untracked(function () {\n      if (typeof typeChecker !== \"function\") {\n        return new Error(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has \" + \"invalid PropType notation.\");\n      }\n\n      var error = createObservableTypeCheckerCreator(allowNativeType, \"Array\")(props, propName, componentName);\n\n      if (error instanceof Error) {\n        return error;\n      }\n\n      var propValue = props[propName];\n\n      for (var i = 0; i < propValue.length; i++) {\n        error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + \"[\" + i + \"]\"].concat(rest));\n\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n\n      return null;\n    });\n  });\n}\n\nvar observableArray = createObservableTypeCheckerCreator(false, \"Array\");\nvar observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);\nvar observableMap = createObservableTypeCheckerCreator(false, \"Map\");\nvar observableObject = createObservableTypeCheckerCreator(false, \"Object\");\nvar arrayOrObservableArray = createObservableTypeCheckerCreator(true, \"Array\");\nvar arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);\nvar objectOrObservableObject = createObservableTypeCheckerCreator(true, \"Object\");\nvar PropTypes = {\n  observableArray: observableArray,\n  observableArrayOf: observableArrayOf,\n  observableMap: observableMap,\n  observableObject: observableObject,\n  arrayOrObservableArray: arrayOrObservableArray,\n  arrayOrObservableArrayOf: arrayOrObservableArrayOf,\n  objectOrObservableObject: objectOrObservableObject\n};\n\nif (!Component) {\n  throw new Error(\"mobx-react requires React to be available\");\n}\n\nif (!observable) {\n  throw new Error(\"mobx-react requires mobx to be available\");\n}\n\nif (typeof unstable_batchedUpdates === \"function\") {\n  configure({\n    reactionScheduler: unstable_batchedUpdates\n  });\n}\n\nexport { observer$1 as observer, Provider, MobXProviderContext, inject, disposeOnUnmount, PropTypes };","map":{"version":3,"sources":["../src/utils/utils.js","../src/observerClass.js","../src/observer.js","../src/Provider.js","../src/inject.js","../src/disposeOnUnmount.js","../src/propTypes.js","../src/index.js"],"names":["let","symbolId","Symbol","symbol","name","const","createdSymbols","createSymbol","is","objA","objB","keysA","Object","keysB","i","hasOwnProperty","x","y","hoistBlackList","$$typeof","render","compare","type","childContextTypes","contextType","contextTypes","defaultProps","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","protoProps","key","enumerable","configurable","writable","value","target","mobxMixins","newSymbol","mobxPatchedDefinition","methodMixins","realMethod","retVal","mx","fn","wrapper","call","getMixins","oldDefinition","originalMethod","newDefinition","createDefinition","wrappedFunc","wrapFunction","get","set","mobxAdminProperty","$mobx","mobxIsUnmounted","skipRenderKey","isForcingUpdateKey","componentClass","makeObservableProp","baseRender","makeComponentReactive","patch","isUsingStaticRendering","process","displayName","getDisplayName","console","comp","setHiddenProp","initialName","isRenderingPending","reaction","this","hasError","Component","reactiveRender","exception","rendering","_allowStateChanges","shallowEqual","valueHolderKey","propName","atomHolderKey","createAtom","getAtom","hasSymbol","ReactForwardRefSymbol","forwardRef","ReactMemoSymbol","memo","React","observerLite","makeClassComponentObserver","MobXProviderContext","stores","parentValue","newValue","Provider","Injector","newProps","context","grabStoresFn","createElement","observer","copyStaticProperties","getInjectName","componentName","component","storeNames","storeName","nextProps","baseStores","arguments","createStoreInjector","grabStoresByName","protoStoreKey","instStoreKey","propKeyOrFunction","prop","Array","f","propertyKeyOrFunction","disposeOnUnmount","c","c2","isDecorator","componentWasAlreadyModified","store","untracked","propFullName","props","actual","validate","chainedCheckType","checkType","propType","propValue","isSymbol","getPropType","createChainableTypeChecker","mobxType","mobxChecker","preciseType","getPreciseType","nativeTypeExpectationMessage","allowNativeType","error","createObservableTypeCheckerCreator","typeChecker","observableArray","observableArrayOf","createObservableArrayOfTypeChecker","observableMap","observableObject","arrayOrObservableArray","arrayOrObservableArrayOf","objectOrObservableObject","PropTypes","reactionScheduler","rdBatched"],"mappings":"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","sourcesContent":["let symbolId = 0\nfunction createSymbol(name) {\n    if (typeof Symbol === \"function\") {\n        return Symbol(name)\n    }\n    const symbol = `__$mobx-react ${name} (${symbolId})`\n    symbolId++\n    return symbol\n}\n\nconst createdSymbols = {}\nexport function newSymbol(name) {\n    if (!createdSymbols[name]) {\n        createdSymbols[name] = createSymbol(name)\n    }\n    return createdSymbols[name]\n}\n\nexport function shallowEqual(objA, objB) {\n    //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (is(objA, objB)) return true\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false\n    }\n    const keysA = Object.keys(objA)\n    const keysB = Object.keys(objB)\n    if (keysA.length !== keysB.length) return false\n    for (let i = 0; i < keysA.length; i++) {\n        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false\n        }\n    }\n    return true\n}\n\nfunction is(x, y) {\n    // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y\n    } else {\n        return x !== x && y !== y\n    }\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList = {\n    $$typeof: 1,\n    render: 1,\n    compare: 1,\n    type: 1,\n    childContextTypes: 1,\n    contextType: 1,\n    contextTypes: 1,\n    defaultProps: 1,\n    getDefaultProps: 1,\n    getDerivedStateFromError: 1,\n    getDerivedStateFromProps: 1,\n    mixins: 1,\n    propTypes: 1\n}\n\nexport function copyStaticProperties(base, target) {\n    const protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base))\n    Object.getOwnPropertyNames(base).forEach(key => {\n        if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key))\n        }\n    })\n}\n\n/**\n * Helper to set `prop` to `this` as non-enumerable (hidden prop)\n * @param target\n * @param prop\n * @param value\n */\nexport function setHiddenProp(target, prop, value) {\n    if (!Object.hasOwnProperty.call(target, prop)) {\n        Object.defineProperty(target, prop, {\n            enumerable: false,\n            configurable: true,\n            writable: true,\n            value\n        })\n    } else {\n        target[prop] = value\n    }\n}\n\n/**\n * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks\n * and the handler provided by mobx-react\n */\nconst mobxMixins = newSymbol(\"patchMixins\")\nconst mobxPatchedDefinition = newSymbol(\"patchedDefinition\")\n\nfunction getMixins(target, methodName) {\n    const mixins = (target[mobxMixins] = target[mobxMixins] || {})\n    const methodMixins = (mixins[methodName] = mixins[methodName] || {})\n    methodMixins.locks = methodMixins.locks || 0\n    methodMixins.methods = methodMixins.methods || []\n    return methodMixins\n}\n\nfunction wrapper(realMethod, mixins, ...args) {\n    // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls\n    mixins.locks++\n\n    try {\n        let retVal\n        if (realMethod !== undefined && realMethod !== null) {\n            retVal = realMethod.apply(this, args)\n        }\n\n        return retVal\n    } finally {\n        mixins.locks--\n        if (mixins.locks === 0) {\n            mixins.methods.forEach(mx => {\n                mx.apply(this, args)\n            })\n        }\n    }\n}\n\nfunction wrapFunction(realMethod, mixins) {\n    const fn = function(...args) {\n        wrapper.call(this, realMethod, mixins, ...args)\n    }\n    return fn\n}\n\nexport function patch(target, methodName, mixinMethod) {\n    const mixins = getMixins(target, methodName)\n\n    if (mixins.methods.indexOf(mixinMethod) < 0) {\n        mixins.methods.push(mixinMethod)\n    }\n\n    const oldDefinition = Object.getOwnPropertyDescriptor(target, methodName)\n    if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {\n        // already patched definition, do not repatch\n        return\n    }\n\n    const originalMethod = target[methodName]\n    const newDefinition = createDefinition(\n        target,\n        methodName,\n        oldDefinition ? oldDefinition.enumerable : undefined,\n        mixins,\n        originalMethod\n    )\n\n    Object.defineProperty(target, methodName, newDefinition)\n}\n\nfunction createDefinition(target, methodName, enumerable, mixins, originalMethod) {\n    let wrappedFunc = wrapFunction(originalMethod, mixins)\n\n    return {\n        [mobxPatchedDefinition]: true,\n        get: function() {\n            return wrappedFunc\n        },\n        set: function(value) {\n            if (this === target) {\n                wrappedFunc = wrapFunction(value, mixins)\n            } else {\n                // when it is an instance of the prototype/a child prototype patch that particular case again separately\n                // since we need to store separate values depending on wether it is the actual instance, the prototype, etc\n                // e.g. the method for super might not be the same as the method for the prototype which might be not the same\n                // as the method for the instance\n                const newDefinition = createDefinition(this, methodName, enumerable, mixins, value)\n                Object.defineProperty(this, methodName, newDefinition)\n            }\n        },\n        configurable: true,\n        enumerable: enumerable\n    }\n}\n","import { PureComponent, Component } from \"react\"\nimport { createAtom, _allowStateChanges, Reaction, $mobx } from \"mobx\"\nimport { isUsingStaticRendering } from \"mobx-react-lite\"\n\nimport { newSymbol, shallowEqual, setHiddenProp, patch } from \"./utils/utils\"\n\nconst mobxAdminProperty = $mobx || \"$mobx\"\nconst mobxIsUnmounted = newSymbol(\"isUnmounted\")\nconst skipRenderKey = newSymbol(\"skipRender\")\nconst isForcingUpdateKey = newSymbol(\"isForcingUpdate\")\n\nexport function makeClassComponentObserver(componentClass) {\n    const target = componentClass.prototype\n    if (target.componentWillReact)\n        throw new Error(\"The componentWillReact life-cycle event is no longer supported\")\n    if (componentClass.__proto__ !== PureComponent) {\n        if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU\n        else if (target.shouldComponentUpdate !== observerSCU)\n            // n.b. unequal check, instead of existence check, as @observer might be on superclass as well\n            throw new Error(\n                \"It is not allowed to use shouldComponentUpdate in observer based components.\"\n            )\n    }\n\n    // this.props and this.state are made observable, just to make sure @computed fields that\n    // are defined inside the component, and which rely on state or props, re-compute if state or props change\n    // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)\n    // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+\n    makeObservableProp(target, \"props\")\n    makeObservableProp(target, \"state\")\n\n    const baseRender = target.render\n    target.render = function() {\n        return makeComponentReactive.call(this, baseRender)\n    }\n    patch(target, \"componentWillUnmount\", function() {\n        if (isUsingStaticRendering() === true) return\n        if (this.render[mobxAdminProperty]) {\n            this.render[mobxAdminProperty].dispose()\n        } else if (process.env.NODE_ENV !== \"production\") {\n            const displayName = getDisplayName(this)\n            console.warn(\n                `The render function for an observer component (${displayName}) was modified after MobX attached. This is not supported, since the new function can't be triggered by MobX.`\n            )\n        }\n        this[mobxIsUnmounted] = true\n    })\n    return componentClass\n}\n\n// Generates a friendly name for debugging\nfunction getDisplayName(comp) {\n    return (\n        comp.displayName ||\n        comp.name ||\n        (comp.constructor && (comp.constructor.displayName || comp.constructor.name)) ||\n        \"<component>\"\n    )\n}\n\nfunction makeComponentReactive(render) {\n    if (isUsingStaticRendering() === true) return render.call(this)\n\n    /**\n     * If props are shallowly modified, react will render anyway,\n     * so atom.reportChanged() should not result in yet another re-render\n     */\n    setHiddenProp(this, skipRenderKey, false)\n    /**\n     * forceUpdate will re-assign this.props. We don't want that to cause a loop,\n     * so detect these changes\n     */\n    setHiddenProp(this, isForcingUpdateKey, false)\n\n    const initialName = getDisplayName(this)\n    const baseRender = render.bind(this)\n\n    let isRenderingPending = false\n\n    const reaction = new Reaction(`${initialName}.render()`, () => {\n        if (!isRenderingPending) {\n            // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)\n            // This unidiomatic React usage but React will correctly warn about this so we continue as usual\n            // See #85 / Pull #44\n            isRenderingPending = true\n            if (this[mobxIsUnmounted] !== true) {\n                let hasError = true\n                try {\n                    setHiddenProp(this, isForcingUpdateKey, true)\n                    if (!this[skipRenderKey]) Component.prototype.forceUpdate.call(this)\n                    hasError = false\n                } finally {\n                    setHiddenProp(this, isForcingUpdateKey, false)\n                    if (hasError) reaction.dispose()\n                }\n            }\n        }\n    })\n    reaction.reactComponent = this\n    reactiveRender[mobxAdminProperty] = reaction\n    this.render = reactiveRender\n\n    function reactiveRender() {\n        isRenderingPending = false\n        let exception = undefined\n        let rendering = undefined\n        reaction.track(() => {\n            try {\n                rendering = _allowStateChanges(false, baseRender)\n            } catch (e) {\n                exception = e\n            }\n        })\n        if (exception) {\n            throw exception\n        }\n        return rendering\n    }\n\n    return reactiveRender.call(this)\n}\n\nfunction observerSCU(nextProps, nextState) {\n    if (isUsingStaticRendering()) {\n        console.warn(\n            \"[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.\"\n        )\n    }\n    // update on any state changes (as is the default)\n    if (this.state !== nextState) {\n        return true\n    }\n    // update if props are shallowly not equal, inspired by PureRenderMixin\n    // we could return just 'false' here, and avoid the `skipRender` checks etc\n    // however, it is nicer if lifecycle events are triggered like usually,\n    // so we return true here if props are shallowly modified.\n    return !shallowEqual(this.props, nextProps)\n}\n\nfunction makeObservableProp(target, propName) {\n    const valueHolderKey = newSymbol(`reactProp_${propName}_valueHolder`)\n    const atomHolderKey = newSymbol(`reactProp_${propName}_atomHolder`)\n    function getAtom() {\n        if (!this[atomHolderKey]) {\n            setHiddenProp(this, atomHolderKey, createAtom(\"reactive \" + propName))\n        }\n        return this[atomHolderKey]\n    }\n    Object.defineProperty(target, propName, {\n        configurable: true,\n        enumerable: true,\n        get: function() {\n            getAtom.call(this).reportObserved()\n            return this[valueHolderKey]\n        },\n        set: function set(v) {\n            if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {\n                setHiddenProp(this, valueHolderKey, v)\n                setHiddenProp(this, skipRenderKey, true)\n                getAtom.call(this).reportChanged()\n                setHiddenProp(this, skipRenderKey, false)\n            } else {\n                setHiddenProp(this, valueHolderKey, v)\n            }\n        }\n    })\n}\n","/* eslint-disable react/display-name */\nimport React, { Component, forwardRef, memo } from \"react\"\nimport { observer as observerLite, Observer } from \"mobx-react-lite\"\n\nimport { makeClassComponentObserver } from \"./observerClass\"\n\nconst hasSymbol = typeof Symbol === \"function\" && Symbol.for\n\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nconst ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof forwardRef === \"function\" && forwardRef(() => {})[\"$$typeof\"]\n\nconst ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof memo === \"function\" && memo(() => {})[\"$$typeof\"]\n\n/**\n * Observer function / decorator\n */\nexport function observer(componentClass) {\n    if (componentClass.isMobxInjector === true) {\n        console.warn(\n            \"Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'\"\n        )\n    }\n\n    if (ReactMemoSymbol && componentClass[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\n            \"Mobx observer: You are trying to use 'observer' on function component wrapped to either another observer or 'React.memo'. The observer already applies 'React.memo' for you.\"\n        )\n    }\n\n    // Unwrap forward refs into `<Observer>` component\n    // we need to unwrap the render, because it is the inner render that needs to be tracked,\n    // not the ForwardRef HoC\n    if (ReactForwardRefSymbol && componentClass[\"$$typeof\"] === ReactForwardRefSymbol) {\n        const baseRender = componentClass.render\n        if (typeof baseRender !== \"function\")\n            throw new Error(\"render property of ForwardRef was not a function\")\n        return forwardRef(function ObserverForwardRef() {\n            return <Observer>{() => baseRender.apply(undefined, arguments)}</Observer>\n        })\n    }\n\n    // Function component\n    if (\n        typeof componentClass === \"function\" &&\n        (!componentClass.prototype || !componentClass.prototype.render) &&\n        !componentClass.isReactClass &&\n        !Object.prototype.isPrototypeOf.call(Component, componentClass)\n    ) {\n        return observerLite(componentClass)\n    }\n\n    return makeClassComponentObserver(componentClass)\n}\n","/* eslint-disable react/prop-types */\nimport React from \"react\"\nimport { shallowEqual } from \"./utils/utils\"\n\nexport const MobXProviderContext = React.createContext({})\n\nexport function Provider({ children, ...stores }) {\n    const parentValue = React.useContext(MobXProviderContext)\n    const value = React.useRef({\n        ...parentValue,\n        ...stores\n    }).current\n\n    if (process && typeof process.env !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n        const newValue = { ...value, ...stores } // spread in previous state for the context based stores\n        if (!shallowEqual(value, newValue)) {\n            throw new Error(\n                \"MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.\"\n            )\n        }\n    }\n\n    return <MobXProviderContext.Provider value={value}>{children}</MobXProviderContext.Provider>\n}\n\nProvider.displayName = \"MobXProvider\"\n","import React, { createElement } from \"react\"\nimport { observer } from \"./observer\"\nimport { copyStaticProperties } from \"./utils/utils\"\nimport { MobXProviderContext } from \"./Provider\"\n\n/**\n * Store Injection\n */\nfunction createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {\n    // Support forward refs\n    let Injector = React.forwardRef((props, ref) => {\n        const newProps = { ...props }\n        const context = React.useContext(MobXProviderContext)\n        Object.assign(newProps, grabStoresFn(context || {}, newProps) || {})\n\n        if (ref) {\n            newProps.ref = ref\n        }\n\n        return createElement(component, newProps)\n    })\n\n    if (makeReactive) Injector = observer(Injector)\n    Injector.isMobxInjector = true // assigned late to suppress observer warning\n\n    // Static fields from component should be visible on the generated Injector\n    copyStaticProperties(component, Injector)\n    Injector.wrappedComponent = component\n    Injector.displayName = getInjectName(component, injectNames)\n    return Injector\n}\n\nfunction getInjectName(component, injectNames) {\n    let displayName\n    const componentName =\n        component.displayName ||\n        component.name ||\n        (component.constructor && component.constructor.name) ||\n        \"Component\"\n    if (injectNames) displayName = \"inject-with-\" + injectNames + \"(\" + componentName + \")\"\n    else displayName = \"inject(\" + componentName + \")\"\n    return displayName\n}\n\nfunction grabStoresByName(storeNames) {\n    return function(baseStores, nextProps) {\n        storeNames.forEach(function(storeName) {\n            if (\n                storeName in nextProps // prefer props over stores\n            )\n                return\n            if (!(storeName in baseStores))\n                throw new Error(\n                    \"MobX injector: Store '\" +\n                        storeName +\n                        \"' is not available! Make sure it is provided by some Provider\"\n                )\n            nextProps[storeName] = baseStores[storeName]\n        })\n        return nextProps\n    }\n}\n\n/**\n * higher order component that injects stores to a child.\n * takes either a varargs list of strings, which are stores read from the context,\n * or a function that manually maps the available stores from the context to props:\n * storesToProps(mobxStores, props, context) => newProps\n */\nexport function inject(/* fn(stores, nextProps) or ...storeNames */ ...storeNames) {\n    let grabStoresFn\n    if (typeof arguments[0] === \"function\") {\n        grabStoresFn = arguments[0]\n        return componentClass =>\n            createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true)\n    } else {\n        return componentClass =>\n            createStoreInjector(\n                grabStoresByName(storeNames),\n                componentClass,\n                storeNames.join(\"-\"),\n                false\n            )\n    }\n}\n","import * as React from \"react\"\nimport { patch, newSymbol } from \"./utils/utils\"\n\nconst protoStoreKey = newSymbol(\"disposeOnUnmountProto\")\nconst instStoreKey = newSymbol(\"disposeOnUnmountInst\")\n\nfunction runDisposersOnWillUnmount() {\n    ;[...(this[protoStoreKey] || []), ...(this[instStoreKey] || [])].forEach(propKeyOrFunction => {\n        const prop =\n            typeof propKeyOrFunction === \"string\" ? this[propKeyOrFunction] : propKeyOrFunction\n        if (prop !== undefined && prop !== null) {\n            if (Array.isArray(prop)) prop.map(f => f())\n            else prop()\n        }\n    })\n}\n\nexport function disposeOnUnmount(target, propertyKeyOrFunction) {\n    if (Array.isArray(propertyKeyOrFunction)) {\n        return propertyKeyOrFunction.map(fn => disposeOnUnmount(target, fn))\n    }\n\n    const c = Object.getPrototypeOf(target).constructor || Object.getPrototypeOf(target.constructor)\n    const c2 = Object.getPrototypeOf(target.constructor)\n    if (\n        !(\n            c === React.Component ||\n            c === React.PureComponent ||\n            c2 === React.Component ||\n            c2 === React.PureComponent\n        )\n    ) {\n        throw new Error(\n            \"[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.\"\n        )\n    }\n\n    if (\n        typeof propertyKeyOrFunction !== \"string\" &&\n        typeof propertyKeyOrFunction !== \"function\" &&\n        !Array.isArray(propertyKeyOrFunction)\n    ) {\n        throw new Error(\n            \"[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.\"\n        )\n    }\n\n    // decorator's target is the prototype, so it doesn't have any instance properties like props\n    const isDecorator = typeof propertyKeyOrFunction === \"string\"\n\n    // add property key / function we want run (disposed) to the store\n    const componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey]\n    const store = isDecorator\n        ? // decorators are added to the prototype store\n          target[protoStoreKey] || (target[protoStoreKey] = [])\n        : // functions are added to the instance store\n          target[instStoreKey] || (target[instStoreKey] = [])\n\n    store.push(propertyKeyOrFunction)\n\n    // tweak the component class componentWillUnmount if not done already\n    if (!componentWasAlreadyModified) {\n        patch(target, \"componentWillUnmount\", runDisposersOnWillUnmount)\n    }\n\n    // return the disposer as is if invoked as a non decorator\n    if (typeof propertyKeyOrFunction !== \"string\") {\n        return propertyKeyOrFunction\n    }\n}\n","import { isObservableArray, isObservableObject, isObservableMap, untracked } from \"mobx\"\n\n// Copied from React.PropTypes\nfunction createChainableTypeChecker(validate) {\n    function checkType(\n        isRequired,\n        props,\n        propName,\n        componentName,\n        location,\n        propFullName,\n        ...rest\n    ) {\n        return untracked(() => {\n            componentName = componentName || \"<<anonymous>>\"\n            propFullName = propFullName || propName\n            if (props[propName] == null) {\n                if (isRequired) {\n                    const actual = props[propName] === null ? \"null\" : \"undefined\"\n                    return new Error(\n                        \"The \" +\n                            location +\n                            \" `\" +\n                            propFullName +\n                            \"` is marked as required \" +\n                            \"in `\" +\n                            componentName +\n                            \"`, but its value is `\" +\n                            actual +\n                            \"`.\"\n                    )\n                }\n                return null\n            } else {\n                return validate(props, propName, componentName, location, propFullName, ...rest)\n            }\n        })\n    }\n\n    const chainedCheckType = checkType.bind(null, false)\n    chainedCheckType.isRequired = checkType.bind(null, true)\n    return chainedCheckType\n}\n\n// Copied from React.PropTypes\nfunction isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === \"symbol\") {\n        return true\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n        return true\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n        return true\n    }\n\n    return false\n}\n\n// Copied from React.PropTypes\nfunction getPropType(propValue) {\n    const propType = typeof propValue\n    if (Array.isArray(propValue)) {\n        return \"array\"\n    }\n    if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return \"object\"\n    }\n    if (isSymbol(propType, propValue)) {\n        return \"symbol\"\n    }\n    return propType\n}\n\n// This handles more types than `getPropType`. Only used for error messages.\n// Copied from React.PropTypes\nfunction getPreciseType(propValue) {\n    const propType = getPropType(propValue)\n    if (propType === \"object\") {\n        if (propValue instanceof Date) {\n            return \"date\"\n        } else if (propValue instanceof RegExp) {\n            return \"regexp\"\n        }\n    }\n    return propType\n}\n\nfunction createObservableTypeCheckerCreator(allowNativeType, mobxType) {\n    return createChainableTypeChecker(function(\n        props,\n        propName,\n        componentName,\n        location,\n        propFullName\n    ) {\n        return untracked(() => {\n            if (allowNativeType) {\n                if (getPropType(props[propName]) === mobxType.toLowerCase()) return null\n            }\n            let mobxChecker\n            switch (mobxType) {\n                case \"Array\":\n                    mobxChecker = isObservableArray\n                    break\n                case \"Object\":\n                    mobxChecker = isObservableObject\n                    break\n                case \"Map\":\n                    mobxChecker = isObservableMap\n                    break\n                default:\n                    throw new Error(`Unexpected mobxType: ${mobxType}`)\n            }\n            const propValue = props[propName]\n            if (!mobxChecker(propValue)) {\n                const preciseType = getPreciseType(propValue)\n                const nativeTypeExpectationMessage = allowNativeType\n                    ? \" or javascript `\" + mobxType.toLowerCase() + \"`\"\n                    : \"\"\n                return new Error(\n                    \"Invalid prop `\" +\n                        propFullName +\n                        \"` of type `\" +\n                        preciseType +\n                        \"` supplied to\" +\n                        \" `\" +\n                        componentName +\n                        \"`, expected `mobx.Observable\" +\n                        mobxType +\n                        \"`\" +\n                        nativeTypeExpectationMessage +\n                        \".\"\n                )\n            }\n            return null\n        })\n    })\n}\n\nfunction createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {\n    return createChainableTypeChecker(function(\n        props,\n        propName,\n        componentName,\n        location,\n        propFullName,\n        ...rest\n    ) {\n        return untracked(() => {\n            if (typeof typeChecker !== \"function\") {\n                return new Error(\n                    \"Property `\" +\n                        propFullName +\n                        \"` of component `\" +\n                        componentName +\n                        \"` has \" +\n                        \"invalid PropType notation.\"\n                )\n            }\n            let error = createObservableTypeCheckerCreator(allowNativeType, \"Array\")(\n                props,\n                propName,\n                componentName\n            )\n            if (error instanceof Error) return error\n            const propValue = props[propName]\n            for (let i = 0; i < propValue.length; i++) {\n                error = typeChecker(\n                    propValue,\n                    i,\n                    componentName,\n                    location,\n                    propFullName + \"[\" + i + \"]\",\n                    ...rest\n                )\n                if (error instanceof Error) return error\n            }\n            return null\n        })\n    })\n}\n\nconst observableArray = createObservableTypeCheckerCreator(false, \"Array\")\nconst observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false)\nconst observableMap = createObservableTypeCheckerCreator(false, \"Map\")\nconst observableObject = createObservableTypeCheckerCreator(false, \"Object\")\nconst arrayOrObservableArray = createObservableTypeCheckerCreator(true, \"Array\")\nconst arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true)\nconst objectOrObservableObject = createObservableTypeCheckerCreator(true, \"Object\")\n\nexport const PropTypes = {\n    observableArray,\n    observableArrayOf,\n    observableMap,\n    observableObject,\n    arrayOrObservableArray,\n    arrayOrObservableArrayOf,\n    objectOrObservableObject\n}\n","import { observable, configure } from \"mobx\"\nimport { Component } from \"react\"\nimport { unstable_batchedUpdates as rdBatched } from \"react-dom\"\n\nif (!Component) throw new Error(\"mobx-react requires React to be available\")\nif (!observable) throw new Error(\"mobx-react requires mobx to be available\")\n\nif (typeof rdBatched === \"function\") configure({ reactionScheduler: rdBatched })\n\nexport {\n    Observer,\n    useObserver,\n    useAsObservableSource,\n    useLocalStore,\n    isUsingStaticRendering,\n    useStaticRendering\n} from \"mobx-react-lite\"\n\nexport { observer } from \"./observer\"\n\nexport { Provider, MobXProviderContext } from \"./Provider\"\nexport { inject } from \"./inject\"\nexport { disposeOnUnmount } from \"./disposeOnUnmount\"\nexport { PropTypes } from \"./propTypes\"\n"]},"metadata":{},"sourceType":"module"}